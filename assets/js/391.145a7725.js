(window.webpackJsonp=window.webpackJsonp||[]).push([[391],{752:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"stringtopath"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stringtopath"}},[t._v("#")]),t._v(" stringToPath")]),t._v(" "),a("h2",{attrs:{id:"description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[a("code",[t._v("stringToPath")]),t._v(" 作用是将深层嵌套属性字符串转换成路径数组，即将类似于 "),a("code",[t._v("a.b.c")]),t._v(" 这样的字符串，转换成 ['a', 'b', 'c'] 这样的数组，方便 "),a("code",[t._v("lodash")]),t._v(" 从数组中将属性一个一个取出，然后取值。")]),t._v(" "),a("h2",{attrs:{id:"params"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#params"}},[t._v("#")]),t._v(" Params")]),t._v(" "),a("p",[a("code",[t._v("string")])]),t._v(" "),a("h2",{attrs:{id:"return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#return"}},[t._v("#")]),t._v(" Return")]),t._v(" "),a("p",[a("code",[t._v("Array")])]),t._v(" "),a("h2",{attrs:{id:"depend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#depend"}},[t._v("#")]),t._v(" Depend")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" memoizeCapped "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./memoizeCapped.js'")]),t._v("\n")])])]),a("blockquote",[a("p",[a("RouterLink",{attrs:{to:"/internal/memoizeCapped.html"}},[t._v("memoizedCapped 源码分析")])],1)]),t._v(" "),a("h2",{attrs:{id:"code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code"}},[t._v("#")]),t._v(" Code")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" charCodeOfDot "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reEscapeChar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\\\(\\\\)?")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rePropName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Match anything that isn't a dot or bracket.")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[^.[\\\\]]+'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'|'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Or match property names within brackets.")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\[(?:'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Match a non-string expression.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'([^\"\\'][^[]*)'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'|'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Or match strings (supports escaping characters).")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'([\"\\'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("')\\\\]'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'|'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Or match "" as the space between consecutive dots or empty brackets.')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))'")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'g'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      \n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stringToPath "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memoizeCapped")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" charCodeOfDot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rePropName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quote"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" match\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quote"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" subString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reEscapeChar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"analyze"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#analyze"}},[t._v("#")]),t._v(" Analyze")]),t._v(" "),a("h4",{attrs:{id:"regexp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp"}},[t._v("#")]),t._v(" Regexp")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rePropName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[^.[\\]]+|\\[(?:([^\"'][^[]*)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n")])])]),a("img",{attrs:{src:t.$withBase("/assets/reg_stringToPath_complete.png")}}),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://regex101.com/r/0nt7oQ/1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Regexp 分析"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("正则可以分为三块来看")])]),t._v(" "),a("ol",[a("li",[a("code",[t._v("[^.[\\]]+")])])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/reg_stringToPath_1.svg")}}),t._v(" "),a("p",[t._v("匹配除 "),a("code",[t._v(".")]),t._v(", "),a("code",[t._v("[")]),t._v(", "),a("code",[t._v("]")]),t._v(" 意外的字符一次或者更多次")]),t._v(" "),a("blockquote",[a("p",[t._v("a.b.c")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("[^xyz]")])]),t._v(" "),a("p",[t._v("一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。\n"),a("br"),t._v(" "),a("br"),t._v('\n例如，[^abc] 和 [^a-c] 是一样的。他们匹配 "brisket" 中的‘r’，也匹配 “chop” 中的‘h’')])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("\\[(?:([^\"'][^[]*)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]")])])]),t._v(" "),a("img",{attrs:{width:"300",src:t.$withBase("/assets/reg_stringToPath_2.svg")}}),t._v(" "),a("blockquote",[a("p",[t._v("a[0].b")])]),t._v(" "),a("p",[t._v("第二部分可以接着进行拆分")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("?:x")])]),t._v(" "),a("p",[t._v("匹配 "),a("code",[t._v("'x'")]),t._v(" 但是不记住匹配项。这种括号叫作非捕获括号，使得你能够定义与正则表达式运算符一起使用的子表达式。看看这个例子 "),a("code",[t._v("/(?:foo){1,2}/")]),t._v("。如果表达式是 "),a("code",[t._v("/foo{1,2}/")]),t._v("，"),a("code",[t._v("{1,2}")]),t._v(" 将只应用于 "),a("code",[t._v("'foo'")]),t._v(" 的最后一个字符 "),a("code",[t._v("'o'")]),t._v("。如果使用非捕获括号，则 "),a("code",[t._v("{1,2}")]),t._v(" 会应用于整个 "),a("code",[t._v("'foo'")]),t._v(" 单词。")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("([^\"'][^[]*)")])])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/reg_stringToPath_2_1.svg")}}),t._v(" "),a("p",[t._v('匹配 "空字符串"(非字符串表达式)')]),t._v(" "),a("ul",[a("li",[a("code",[t._v("([\"'])")])])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/reg_stringToPath_2_2.svg")}}),t._v(" "),a("p",[t._v("匹配 "),a("code",[t._v('"')]),t._v(", "),a("code",[t._v("'")])]),t._v(" "),a("blockquote",[a("p",[t._v("[xyz]")]),t._v(" "),a("p",[t._v('一个字符集合。匹配方括号中的任意字符，包括转义序列。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。\n例如，[abcd] 和 [a-d] 是一样的。他们都匹配 "brisket" 中的‘b’, 也都匹配 “city” 中的‘c’。/[a-z.]+/ 和 /[\\w.]+/ 与字符串 “test.i.ng” 匹配。')])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2")])])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/reg_stringToPath_2_3.svg")}}),t._v(" "),a("p",[t._v("匹配字符串，支持转移字符")]),t._v(" "),a("blockquote",[a("p",[t._v("\\2 代表第二个 ()\n"),a("br"),t._v(" "),a("br"),t._v(" "),a("code",[t._v("x(?!y)")])]),t._v(" "),a("p",[t._v("仅仅当 'x' 后面不跟着 'y' 时匹配 'x'，这被称为正向否定查找。\n"),a("br"),t._v(" "),a("br"),t._v('\n例如，仅仅当这个数字后面没有跟小数点的时候，/\\d+(?!.)/ 匹配一个数字。正则表达式 /\\d+(?!.)/.exec ("3.141") 匹配‘141’而不是‘3.141’')])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v("(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))")])])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/reg_stringToPath_3.svg")}}),t._v(" "),a("blockquote",[a("p",[t._v(".......    [][][][]")])]),t._v(" "),a("p",[t._v("获取连续的 "),a("code",[t._v(".")]),t._v(" 或者连续的 "),a("code",[t._v("[]")]),t._v(" 中的间隔")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/reg_stringToPath_3_1.png")}}),t._v(" "),a("blockquote",[a("p",[t._v("x(?=y)\n"),a("br"),t._v(" "),a("br"),t._v("\n匹配 'x' 仅仅当 'x' 后面跟着 'y'. 这种叫做先行断言。\n"),a("br"),t._v(" "),a("br"),t._v("\n例如，/Jack (?=Sprat)/ 会匹配到 'Jack' 仅当它后面跟着 'Sprat'。/Jack (?=Sprat|Frost)/ 匹配‘Jack’仅当它后面跟着 'Sprat' 或者是‘Frost’。但是‘Sprat\n’和‘Frost’都不是匹配结果的一部分。")])]),t._v(" "),a("h4",{attrs:{id:"处理以-开头的字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理以-开头的字符串"}},[t._v("#")]),t._v(" 处理以 "),a("code",[t._v(".")]),t._v(" 开头的字符串")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" charCodeOfDot "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" charCodeOfDot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("以 "),a("code",[t._v(".")]),t._v(" 开头的字符串，"),a("code",[t._v("lodash")]),t._v(" 会 "),a("code",[t._v("push")]),t._v(" 一个空字符串。")]),t._v(" "),a("h4",{attrs:{id:"处理常规路径-如-a-b-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理常规路径-如-a-b-c"}},[t._v("#")]),t._v(" 处理常规路径，如 "),a("code",[t._v("a.b.c")])]),t._v(" "),a("p",[a("code",[t._v("a.b.c")]),t._v(" 会匹配到 "),a("code",[t._v("[^.[\\]]+")]),t._v(" 正则，匹配3次，拿到 "),a("code",[t._v("a")]),t._v("、"),a("code",[t._v("b")]),t._v("、"),a("code",[t._v("c")]),t._v("，代码逻辑简化如下")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rePropName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" match\n      result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"处理中括号取值-如-a-b-c、a-0-b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理中括号取值-如-a-b-c、a-0-b"}},[t._v("#")]),t._v(" 处理中括号取值，如 "),a("code",[t._v("a['b'].c")]),t._v("、"),a("code",[t._v("a[0].b")])]),t._v(" "),a("p",[a("code",[t._v("a[0].b")]),t._v(" 和 "),a("code",[t._v("a['b'].c")]),t._v(" 会匹配到 "),a("code",[t._v("\\[(?:([^\"'][^[]*)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]")]),t._v("， 代码逻辑简化如下")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rePropName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quote")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" match\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quote"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" subString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reEscapeChar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("a[0].b")]),t._v(" 匹配时")]),t._v(" "),a("ol",[a("li",[t._v("此时 "),a("code",[t._v("key")]),t._v(" 匹配到 "),a("code",[t._v("match")]),t._v(" 为 "),a("code",[t._v("[0]")])]),t._v(" "),a("li",[t._v("但是 "),a("code",[t._v("expression")]),t._v(" "),a("em",[t._v("(触发"),a("code",[t._v("([^\"'][^[]*)")]),t._v("正则)")]),t._v("  为 "),a("code",[t._v("0")])]),t._v(" "),a("li",[t._v("所以最终结果为 "),a("code",[t._v("0")]),t._v(",返回 "),a("code",[t._v("a")]),t._v("、"),a("code",[t._v("0")]),t._v("、"),a("code",[t._v("b")])])]),t._v(" "),a("p",[a("code",[t._v("a['b'].c")]),t._v(" 匹配时")]),t._v(" "),a("ol",[a("li",[t._v("此时 "),a("code",[t._v("key")]),t._v(" 匹配到 "),a("code",[t._v("match")]),t._v(" 为 ['b']")]),t._v(" "),a("li",[t._v("触发 "),a("code",[t._v("quote")]),t._v(" "),a("em",[t._v("(触发"),a("code",[t._v("([\"'])")]),t._v("正则)")]),t._v("  判断")]),t._v(" "),a("li",[t._v("此时 "),a("code",[t._v("subString")]),t._v(" "),a("em",[t._v("(触发"),a("code",[t._v("((?:(?!\\2)[^\\\\]|\\\\.)*?)")]),t._v("正则)")]),t._v("  为 "),a("code",[t._v("'b'")])]),t._v(" "),a("li",[t._v("如果是转义字符 如："),a("code",[t._v("a[\\'\\\\b\\'].d\"")]),t._v(",此时 "),a("code",[t._v("subString")]),t._v(" 就为 "),a("code",[t._v("\\b")]),t._v(",此时调用 "),a("code",[t._v("replace")]),t._v(" 方法，去除掉转义，返回 "),a("code",[t._v("b")])])]),t._v(" "),a("h4",{attrs:{id:"最终会返回结果数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最终会返回结果数组"}},[t._v("#")]),t._v(" 最终会返回结果数组")]),t._v(" "),a("h2",{attrs:{id:"remark"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remark"}},[t._v("#")]),t._v(" Remark")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("String.prototype.replace() MDN"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式 MDN"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/qdlaoyao/js-regex-mini-book",target:"_blank",rel:"noopener noreferrer"}},[t._v("老姚的正则表达式mini GitHub"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{download:"",target:"_blank",href:t.$withBase("/assets/JavaScript正则表达式迷你书（1.1版）.pdf")}},[t._v("JavaScript正则表达式mini 1.1")])])]),t._v(" "),a("h2",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringToPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a[b].c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 'a', 'b', 'c' ]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringToPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a[b][c].d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 'a', 'b', 'c', 'd' ]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringToPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"a[\\'b\\'][c].d\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 'a', 'b', 'c', 'd' ]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringToPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"a[\\'\\\\b\\']['c'].d\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 'a', 'b', 'c', 'd' ]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringToPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a.b.c[d]"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 'a', 'b', 'c', 'd' ]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringToPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"['a']['b'].c['d']\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 'a', 'b', 'c', 'd' ]")]),t._v("\n")])])]),a("p",[a("a",{attrs:{href:"https://codesandbox.io/s/lodash-stringtopath-mmv28?file=/src/App.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("stringToPath Test"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);