(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{578:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"tonumber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tonumber"}},[t._v("#")]),t._v(" toNumber")]),t._v(" "),a("h2",{attrs:{id:"description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("转换 "),a("code",[t._v("value")]),t._v(" 为一个数字。")]),t._v(" "),a("h2",{attrs:{id:"params"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#params"}},[t._v("#")]),t._v(" Params")]),t._v(" "),a("p",[a("code",[t._v("Value")])]),t._v(" "),a("h2",{attrs:{id:"return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#return"}},[t._v("#")]),t._v(" Return")]),t._v(" "),a("p",[a("code",[t._v("Number")])]),t._v(" "),a("h2",{attrs:{id:"depend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#depend"}},[t._v("#")]),t._v(" Depend")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" isObject "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./isObject.js'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" isSymbol "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./isSymbol.js'")]),t._v("\n")])])]),a("blockquote",[a("p",[a("RouterLink",{attrs:{to:"/export/isObject.html"}},[t._v("isObject 源码分析")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("RouterLink",{attrs:{to:"/export/isSymbol.html"}},[t._v("isSymbol 源码分析")])],1)]),t._v(" "),a("h2",{attrs:{id:"code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code"}},[t._v("#")]),t._v(" Code")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Used as references for various `Number` constants. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NAN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Used to match leading and trailing whitespace. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reTrim "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\s+|\\s+$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Used to detect bad signed hexadecimal string values. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reIsBadHex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[-+]0x[0-9a-f]+$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Used to detect binary string values. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reIsBinary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^0b[01]+$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Used to detect octal string values. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reIsOctal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^0o[0-7]+$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Built-in method references without a dependency on `root`. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" freeParseInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parseInt\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSymbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NAN")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" other "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valueOf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" value\n    value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("other"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" other\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("value\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reTrim"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isBinary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reIsBinary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isBinary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" reIsOctal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeParseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isBinary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reIsBadHex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NAN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"analyze"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#analyze"}},[t._v("#")]),t._v(" Analyze")]),t._v(" "),a("h4",{attrs:{id:"正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则"}},[t._v("#")]),t._v(" 正则")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("/^\\s+|\\s+$/g")]),t._v(" , 匹配字符串前后空格")])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/reg_toNumber_1.svg")}}),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("/^[-+]0x[0-9a-f]+$/i")]),t._v("， 匹配有符号的 16 进制数值")])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/reg_toNumber_2.svg")}}),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v("/^0b[01]+$/i")]),t._v("， 匹配 2 进制数值")])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/reg_toNumber_3.svg")}}),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("code",[t._v("/^0o[0-7]+$/i")]),t._v("， 匹配 8 进制数值")])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/reg_toNumber_4.svg")}}),t._v(" "),a("h4",{attrs:{id:"分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[t._v("#")]),t._v(" 分析")]),t._v(" "),a("ol",[a("li",[t._v("如果传入的 "),a("code",[t._v("value")]),t._v(" 本身 "),a("code",[t._v("typeof")]),t._v(" 就为 "),a("code",[t._v("number")]),t._v(" 则直接返回")]),t._v(" "),a("li",[t._v("如果传入的 "),a("code",[t._v("value")]),t._v(" 是 "),a("code",[t._v("symbol")]),t._v(" 类型，返回 "),a("code",[t._v("NaN")])]),t._v(" "),a("li",[t._v("如果传入的 "),a("code",[t._v("value")]),t._v(" 为 "),a("code",[t._v("object")]),t._v("，首先判断 "),a("code",[t._v("typeof value.valueOf")]),t._v(" 是不是 "),a("code",[t._v("function")]),t._v("，判断 value 的 "),a("code",[t._v("prototype")]),t._v(" 是否含有 "),a("code",[t._v("valueOf")]),t._v(" 方法 （"),a("code",[t._v("typeof")]),t._v(" 运算符等级高于 "),a("code",[t._v("===")]),t._v("），如果是就使用 "),a("code",[t._v("value.valueOf")]),t._v(" ,否则就使用 "),a("code",[t._v("value")]),t._v("。"),a("strong",[t._v("在这里有一点 "),a("code",[t._v("typeof value.valueOf")]),t._v(" 和 "),a("code",[t._v("typeof value.valueOf()")]),t._v(" 是两个概念")]),t._v(" , 前者是判断 "),a("code",[t._v("value")]),t._v(" 的属性 "),a("code",[t._v("valueOf")]),t._v(" 是什么类型（在 "),a("code",[t._v("toNumber")]),t._v(" 中就是判断 是否含有 "),a("code",[t._v("valueOf")]),t._v(" 函数），后者是针对于 "),a("code",[t._v("value.valueO")]),t._v(" 的执行结果进行 "),a("code",[t._v("typeof")]),t._v("。只有在 "),a("code",[t._v("value")]),t._v(" 本身为 function 的情况下 "),a("code",[t._v("typeof value.valueOf === typeof value.valueOf()")]),t._v(" 为 "),a("code",[t._v("true")])]),t._v(" "),a("li",[t._v("继续进行 "),a("code",[t._v("isObject")]),t._v(" 的判断，如果是 "),a("code",[t._v("object")]),t._v("，则直接转为 "),a("code",[t._v("string")]),t._v("， 否则就等于 "),a("code",[t._v("other")]),t._v(" ，此时 "),a("code",[t._v("other")]),t._v(" 都是基本类型")]),t._v(" "),a("li",[t._v("针对 "),a("code",[t._v("value")]),t._v(" 本身不是 "),a("code",[t._v("string")]),t._v(" 的情况进行处理，如果 "),a("code",[t._v("value")]),t._v(" 本身为 0 ，则返回 "),a("code",[t._v("value")]),t._v(" ，否则调用一元正号转换为 "),a("code",[t._v("Number")]),t._v("，这里不直接处理 string 是因为 "),a("code",[t._v("value")]),t._v(" 有可能为 "),a("code",[t._v("`${other}`")]),t._v(" 生成的字符串，此时如果 "),a("code",[t._v("other")]),t._v(" 为 "),a("code",[t._v("object")]),t._v(" ，这时 "),a("code",[t._v("value")]),t._v(" 就是 "),a("code",[t._v("'[object Object]'")]),t._v(",直接使用 "),a("strong",[t._v("一元正号")]),t._v(" 进行转换的话，会返回 "),a("code",[t._v("NaN")])]),t._v(" "),a("li",[t._v("去除 "),a("code",[t._v("value")]),t._v(" 前后的空格")]),t._v(" "),a("li",[t._v("首先判断 传入的 "),a("code",[t._v("value")]),t._v(" 是否符合 二进制和八进制 规则，如果符合，则调用原生 "),a("code",[t._v("parseInt")]),t._v(" 进行处理，第一个参数传入了 "),a("code",[t._v("value.slice(2)")]),t._v(", 第二个参数则根据二进制和八进制传入了对应了数值")]),t._v(" "),a("li",[t._v("如果是负的十六进制的数值，直接返回 "),a("code",[t._v("NaN")]),t._v(", 否则调用 "),a("strong",[t._v("一元正号")]),t._v(" 转为数字")])]),t._v(" "),a("h2",{attrs:{id:"remark"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remark"}},[t._v("#")]),t._v(" Remark")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf",target:"_blank",rel:"noopener noreferrer"}},[t._v("valueOf MDN"),a("OutboundLink")],1)])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("对象")]),t._v(" "),a("th",[t._v("返回值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Array")]),t._v(" "),a("td",[t._v("返回数组对象本身")])]),t._v(" "),a("tr",[a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("布尔值")])]),t._v(" "),a("tr",[a("td",[t._v("Date")]),t._v(" "),a("td",[t._v("存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC")])]),t._v(" "),a("tr",[a("td",[t._v("Function")]),t._v(" "),a("td",[t._v("函数本身")])]),t._v(" "),a("tr",[a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("数字值")])]),t._v(" "),a("tr",[a("td",[t._v("Object")]),t._v(" "),a("td",[t._v("对象本身。这是默认情况")])]),t._v(" "),a("tr",[a("td",[t._v("String")]),t._v(" "),a("td",[t._v("字符串值")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("Math 和 Error 对象没有 valueOf 方法。")])])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("a",{attrs:{href:"https://github.com/lodash/lodash/pull/1577/commits/1c6de59e3112996ee93c0d8fd1b447f569f8bd21#diff-36b7ba0ba252cc39fa5921d9484b7674c8bc7af119636ba7f46194ee871047b6R9807",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于负十六进制的修改"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#%E4%B8%80%E5%85%83%E6%AD%A3%E5%8F%B7",target:"_blank",rel:"noopener noreferrer"}},[t._v("一元正号 MDN"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://262.ecma-international.org/6.0/#sec-unary-plus-operator-runtime-semantics-evaluation",target:"_blank",rel:"noopener noreferrer"}},[t._v("一元正号 ECMA"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("一元正号运算符位于其操作数前面，计算其操作数的数值，如果操作数不是一个数值，会尝试将其转换成一个数值。 尽管一元负号也能转换非数值类型，但是一元正号是转换其他对象到数值的最快方法，也是最推荐的做法，因为它不会对数值执行任何多余操作。它可以将字符串转换成整数和浮点数形式，也可以转换非字符串值 "),a("code",[t._v("true")]),t._v("，"),a("code",[t._v("false")]),t._v(" 和 "),a("code",[t._v("null")]),t._v("。小数和十六进制格式字符串也可以转换成数值。负数形式字符串也可以转换成数值（对于十六进制不适用）。如果它不能解析一个值，则计算结果为 "),a("code",[t._v("NaN")]),t._v("。")])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/toNumber_1.png")}}),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[t._v("关于 "),a("code",[t._v("lodash")]),t._v(" 的 "),a("code",[t._v("toNumber")]),t._v(" 方法，按照现在 "),a("code",[t._v("toNumber")]),t._v(" 的处理逻辑来看， 传入 "),a("code",[t._v("'0xf'")]),t._v(" "),a("code",[t._v("'0b1'")]),t._v(" "),a("code",[t._v("'0o7'")]),t._v(" 都是可以正常转换的，如果我们输入 "),a("code",[t._v("'-0xf'")]),t._v("，会走正则匹配然后返回 "),a("code",[t._v("NaN")]),t._v(" 逻辑，我们如果输入 "),a("code",[t._v("'-0b1'")]),t._v(" "),a("code",[t._v("'-0o7'")]),t._v(" 这种，到最后会走到 "),a("code",[t._v("+value")]),t._v(" 的逻辑，进行 "),a("strong",[t._v("一元正号")]),t._v(" 的转换，一元正号对于 "),a("code",[t._v("'-0b1'")]),t._v(" 这种转换不符合 第5条说的情况，会返回 "),a("code",[t._v("NaN")]),t._v(" 。 如果使用原生 "),a("code",[t._v("parseInt")]),t._v("  ，则是会返回 "),a("code",[t._v("0")]),t._v(" ， 原生 "),a("code",[t._v("parseInt")]),t._v(" 对于正负十六进制，都可以进行有效的转换,如下")])]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v('如果输入的 string 以 "0x"或"0x"（一个 0，后面是小写或大写的 X）开头，那么 radix 被假定为 16，字符串的其余部分被当做十六进制数去解析。')]),t._v(" "),a("li",[t._v('如果输入的 string 以 "0"（0）开头， radix 被假定为 8（八进制）或 10（十进制）。具体选择哪一个 radix 取决于实现。ECMAScript 5 澄清了应该使用 10 (十进制)，但不是所有的浏览器都支持。因此，在使用 parseInt 时，一定要指定一个 radix。')]),t._v(" "),a("li",[t._v("如果输入的 string 以任何其他值开头， radix 是 10 (十进制)。")])])]),t._v(" "),a("p",[t._v("对于 二进制和八进制 ，在去掉前缀后 parseInt 也可以进行有效的转换")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])]),a("p",[t._v("这里有一点需要注意，parseInt 第一个参数需要传入的是 "),a("code",[t._v("String")]),t._v(" 类型的值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 21")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xf'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 15")]),t._v("\n")])])]),a("p",[t._v("可以看出来对于不加引号的值，得到的结果不是我们想要的结果，是因为")]),t._v(" "),a("blockquote",[a("p",[t._v("要被解析的值。如果参数不是一个字符串，则将其转换为字符串 (使用  ToString 抽象操作)。字符串开头的空白符将会被忽略。")])]),t._v(" "),a("p",[a("code",[t._v("parseInt(0xf, 16)")]),t._v(" 等同于下")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '15'  在这里隐式的转换，默认的 radix 就是 10 进制")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'15'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 21")]),t._v("\n")])])]),a("ol",{attrs:{start:"7"}},[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt",target:"_blank",rel:"noopener noreferrer"}},[t._v("parseInt MDN"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toString",target:"_blank",rel:"noopener noreferrer"}},[t._v("Number.prototype.toString() MDN"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 3.2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_VALUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 5e-324")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => Infinity")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 3.2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xf'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 15")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0b10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-0xf'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => NaN")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);