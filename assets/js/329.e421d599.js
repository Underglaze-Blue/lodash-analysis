(window.webpackJsonp=window.webpackJsonp||[]).push([[329],{690:function(e,t,s){"use strict";s.r(t);var a=s(42),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"cloneregexp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cloneregexp"}},[e._v("#")]),e._v(" cloneRegExp")]),e._v(" "),s("h2",{attrs:{id:"description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[e._v("#")]),e._v(" Description")]),e._v(" "),s("p",[e._v("正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法，以及 String 的 match、matchAll、replace、search 和 split 方法。")]),e._v(" "),s("h2",{attrs:{id:"params"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#params"}},[e._v("#")]),e._v(" Params")]),e._v(" "),s("p",[s("code",[e._v("{Object} regexp")])]),e._v(" "),s("h2",{attrs:{id:"return"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#return"}},[e._v("#")]),e._v(" Return")]),e._v(" "),s("p",[s("code",[e._v("{Object} regexp")])]),e._v(" "),s("h2",{attrs:{id:"code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#code"}},[e._v("#")]),e._v(" Code")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" reFlags "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("\\w*$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cloneRegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("regexp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("regexp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("regexp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" reFlags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("regexp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("lastIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" regexp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("lastIndex\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" result\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("h2",{attrs:{id:"analyze"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#analyze"}},[e._v("#")]),e._v(" Analyze")]),e._v(" "),s("ol",[s("li",[s("code",[e._v("RegExp.prototype.source")]),e._v(" 属性返回一个值为当前正则表达式对象的模式文本的字符串，该字符串不会包含正则字面量两边的斜杠以及任何的标志字符。")]),e._v(" "),s("li",[s("code",[e._v("RegExp.prototype.exec()")]),e._v(" 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。")]),e._v(" "),s("li",[s("code",[e._v("RegExp.lastIndex")]),e._v(" 是正则表达式的一个可读可写的整型属性，用来指定下一次匹配的起始索引。")]),e._v(" "),s("li",[s("code",[e._v("RegExp.prototype.flags")]),e._v(" 属性返回一个字符串，由当前正则表达式对象的标志组成。")]),e._v(" "),s("li",[e._v("首先通过 "),s("code",[e._v("regexp.constructor")]),e._v(" 也就是 "),s("code",[e._v("RegExp")]),e._v(" 来 "),s("code",[e._v("new")]),e._v(" 一个新的正则")]),e._v(" "),s("li",[e._v("拿到之前正则的模式文本，通过 "),s("code",[e._v("reFlags")]),e._v(" 来匹配 拿到 标志字符，这里不使用 "),s("code",[e._v("flags")]),e._v(" 是因为浏览器兼容性问题")])]),e._v(" "),s("img",{attrs:{src:e.$withBase("/assets/cloneRegexp.png")}}),e._v(" "),s("p",[e._v("所以使用了正则来匹配")]),e._v(" "),s("img",{attrs:{src:e.$withBase("/assets/reg_cloneRegexp.svg")}}),e._v(" "),s("ol",{attrs:{start:"7"}},[s("li",[e._v("最后保证了 lastIndex 属性和之前的一致，至此 正则克隆完成")])]),e._v(" "),s("h2",{attrs:{id:"remark"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remark"}},[e._v("#")]),e._v(" Remark")]),e._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"}},[e._v("RegExp MDN"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("^\\d{1-2}\\w+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[e._v("gmi")])]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cloneRegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// /^\\d{1-2}\\w+$/gim")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);