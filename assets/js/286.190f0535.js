(window.webpackJsonp=window.webpackJsonp||[]).push([[286],{647:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"baseintersection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#baseintersection"}},[t._v("#")]),t._v(" baseIntersection")]),t._v(" "),s("h2",{attrs:{id:"description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),s("p",[t._v("baseIntersection 的作用是找出多个数组之间的交集。")]),t._v(" "),s("h2",{attrs:{id:"params"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#params"}},[t._v("#")]),t._v(" Params")]),t._v(" "),s("p",[s("code",[t._v("(arrays, iteratee, comparator)")])]),t._v(" "),s("blockquote",[s("p",[t._v("{Array} arrays - 数组集合（二维数组）")]),t._v(" "),s("p",[t._v("{Function} [iteratee] - 每个元素调用的迭代器。")]),t._v(" "),s("p",[t._v("{Function} [comparator] - 每个元素调用的比较器")])]),t._v(" "),s("h2",{attrs:{id:"return"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#return"}},[t._v("#")]),t._v(" Return")]),t._v(" "),s("p",[s("code",[t._v("Array")])]),t._v(" "),s("h2",{attrs:{id:"depend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#depend"}},[t._v("#")]),t._v(" Depend")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" SetCache "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./SetCache.js'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" arrayIncludes "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./arrayIncludes.js'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" arrayIncludesWith "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./arrayIncludesWith.js'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" map "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../map.js'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" cacheHas "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./cacheHas.js'")]),t._v("\n")])])]),s("blockquote",[s("p",[s("RouterLink",{attrs:{to:"/internal/setCache.html"}},[t._v("SetCache 源码分析")]),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("RouterLink",{attrs:{to:"/internal/arrayIncludes.html"}},[t._v("arrayIncludes 源码分析")]),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("RouterLink",{attrs:{to:"/internal/arrayIncludesWith.html"}},[t._v("arrayIncludesWith 源码分析")]),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("RouterLink",{attrs:{to:"/export/map.html"}},[t._v("map 源码分析")]),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("RouterLink",{attrs:{to:"/internal/cacheHas.html"}},[t._v("cacheHas 源码分析")])],1)]),t._v(" "),s("h2",{attrs:{id:"code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#code"}},[t._v("#")]),t._v(" Code")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("baseIntersection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iteratee"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comparator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" includes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" comparator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" arrayIncludesWith "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" arrayIncludes\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" othLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" caches "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" array\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" maxLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" othIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" othLength\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" iteratee"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("iteratee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    maxLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    caches"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("comparator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iteratee "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SetCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" seen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" caches"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  outer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" maxLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" computed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iteratee "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("iteratee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" value\n\n    value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comparator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seen\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cacheHas")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" computed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" computed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comparator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      othIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" othLength\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cache "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" caches"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cache\n          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cacheHas")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" computed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" computed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comparator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v(" outer\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        seen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("computed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"analyze"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#analyze"}},[t._v("#")]),t._v(" Analyze")]),t._v(" "),s("h3",{attrs:{id:"交集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#交集"}},[t._v("#")]),t._v(" 交集")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("确定结果数组的长度。最终的结果数组长度肯定不会超过数组集中最短的数组长度。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("maxLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("lodash 思路是遍历数组集第一项（下标为0），如果第一个数组中的值，在剩余的每个数组中都存在，那就可以将它 push 到结果数组中，如果第一个数组中，有值在其他任一数组中不存在，则证明不是交集需要的值")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cache "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" caches"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cache\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cacheHas")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" computed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" computed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comparator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v(" outer\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"取结果数组长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#取结果数组长度"}},[t._v("#")]),t._v(" 取结果数组长度")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" othLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" array\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" maxLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" othIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" othLength\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    maxLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",[s("li",[s("p",[t._v("首先获取到 整个 "),s("code",[t._v("arrays")]),t._v(" 数组集的 "),s("code",[t._v("length")]),t._v("，定义结果数组 "),s("code",[t._v("result")])])]),t._v(" "),s("li",[s("p",[t._v("定义 "),s("code",[t._v("maxLength")]),t._v(" 为 "),s("code",[t._v("Infinity")]),t._v(" ， 暂存 "),s("code",[t._v("othLength")]),t._v(" 为 "),s("code",[t._v("othIndex")]),t._v("，做 递减使用")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("while")]),t._v(" 循环遍历，每次都会更新 "),s("code",[t._v("maxLength")]),t._v(" 为最小值")])]),t._v(" "),s("li",[s("p",[t._v("在最终 "),s("code",[t._v("while")]),t._v(" 循环时，会根据 "),s("code",[t._v("maxLength")]),t._v(" 作为结束条件判断")])])]),t._v(" "),s("h3",{attrs:{id:"iteratee"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iteratee"}},[t._v("#")]),t._v(" iteratee")]),t._v(" "),s("p",[t._v("iteratee 函数是用来处理值的，比如将字符串数字或者 boolean 转为数字等，对数组的每个元素都会调用")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" iteratee"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("iteratee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    maxLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    caches"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("comparator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iteratee "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SetCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" computed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iteratee "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("iteratee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" value\n")])])]),s("ol",[s("li",[s("p",[s("code",[t._v("othIndex")]),t._v(" 就是根据 "),s("code",[t._v("arrays.length")]),t._v(" 来的，所以这里取值，获取数组集每一项")])]),t._v(" "),s("li",[s("p",[t._v("如果 "),s("code",[t._v("othIndex")]),t._v(" 不为 0，并且传入了 "),s("code",[t._v("iteratee")]),t._v(" 函数，则针对于获取到的数组每一项进行 "),s("code",[t._v("map")]),t._v(" 迭代，使用 "),s("code",[t._v("iteratee")]),t._v(" 函数处理每一项的值")])]),t._v(" "),s("li",[s("p",[t._v("这里并没有处理 数组集第一项，是因为最终遍历时，要通过第一项的值来判断，第一项值的处理放到了最终的while循环中")])])]),t._v(" "),s("h3",{attrs:{id:"comparator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#comparator"}},[t._v("#")]),t._v(" comparator")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" includes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" comparator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" arrayIncludesWith "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" arrayIncludes\n")])])]),s("p",[t._v("可以看到 "),s("code",[t._v("comparator")]),t._v(" 的作用主要是用来进行比较使用的，比如正常逻辑用 "),s("code",[t._v("===")]),t._v(" ， 在传入了 "),s("code",[t._v("comparator")]),t._v(" 后，可以自定义比较啊， 比如 自定义为 "),s("code",[t._v("==")])]),t._v(" "),s("h3",{attrs:{id:"cache"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache"}},[t._v("#")]),t._v(" cache")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" caches "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ncaches"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("comparator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iteratee "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SetCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n")])])]),s("p",[t._v("这里也是在获取结果数组长度的 "),s("code",[t._v("while")]),t._v(" 循环中设置的，要么设置为 "),s("code",[t._v("new SetCache")]),t._v(" 要么为 "),s("code",[t._v("undefined")]),t._v("，满足以下条件会将遍历的当前项设置为 "),s("code",[t._v("new SetCache")]),t._v(" （这里数组集第一项如果满足条件会初始化为一个空的 SetCache，没有数据）\n- 用户没有传入 "),s("code",[t._v("comparator")]),t._v("\n- 传入了 "),s("code",[t._v("iteratee")]),t._v(" 或者\n- 数组集第一项的 "),s("code",[t._v("length >= 120")]),t._v(" 并且 当前遍历的数组 "),s("code",[t._v("length >= 120")])]),t._v(" "),s("p",[t._v("到现在为止，已经处理了结果数组的最大长度，处理了数组集中除第一项之外其他的迭代函数(iteratee)，处理了缓存(caches)，下面开始分析代码实现过程")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("第一步")]),t._v(" "),s("ul",[s("li",[t._v("定义了 "),s("code",[t._v("includes")]),t._v(" 函数采用默认对比还是用户自定对比("),s("code",[t._v("comparator")]),t._v(")")]),t._v(" "),s("li",[t._v("拿到数组第一项的长度("),s("code",[t._v("arrays[0].length")]),t._v(") 和 数组集中的数组个数("),s("code",[t._v("arrays.length")]),t._v(")")]),t._v(" "),s("li",[t._v("定义了缓存的数组长度("),s("code",[t._v("new Array(othLength)")]),t._v(")")]),t._v(" "),s("li",[t._v("定义了结果数组 "),s("code",[t._v("result")])])])]),t._v(" "),s("li",[s("p",[t._v("第二步")]),t._v(" "),s("ul",[s("li",[t._v("定义了 "),s("code",[t._v("array")]),t._v(" 变量暂存，定义了结果数组的最大长度，缓存了 "),s("code",[t._v("arrays.length")]),t._v(" 的长度("),s("code",[t._v("othIndex")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("while")]),t._v(" 循环遍历")]),t._v(" "),s("li",[t._v("循环开始，首先拿到当前遍历下标所对应的 数组集中的数组")]),t._v(" "),s("li",[t._v("如果在当前遍历下标不为0，并且用户自定义了迭代函数("),s("code",[t._v("iteratee")]),t._v(")的情况下，对于当前下标对应的数组集中的数组做 "),s("code",[t._v("map")]),t._v(" 遍历，对于每一项值调用 "),s("code",[t._v("iteratee")]),t._v(" 函数进行处理")]),t._v(" "),s("li",[t._v("重新赋值 "),s("code",[t._v("maxLength")]),t._v(" ，在 "),s("code",[t._v("while")]),t._v(" 循环中 一直取 最小值("),s("code",[t._v("Math.min")]),t._v(")\n"),s("ul",[s("li",[t._v("这里其实可以加一个判断遍历的数组"),s("code",[t._v("length")]),t._v("是否大于0，如果为0，可以直接 "),s("code",[t._v("break")]),t._v(" 掉循环，并返回空数组")])])]),t._v(" "),s("li",[t._v("针对是否缓存数组做一个处理，如果需要则设置为 "),s("code",[t._v("SetCache")]),t._v(" 否则为 "),s("code",[t._v("undefined")])])])]),t._v(" "),s("li",[s("p",[t._v("第三步")]),t._v(" "),s("ul",[s("li",[t._v("重新定义 "),s("code",[t._v("array")]),t._v(" 变量为数组第一项，去缓存("),s("code",[t._v("cache")]),t._v(")第一项的值，赋值给 "),s("code",[t._v("seen")]),t._v("，定义下标 "),s("code",[t._v("index")]),t._v(" 为 "),s("code",[t._v("-1")])]),t._v(" "),s("li",[t._v("定义外层 "),s("code",[t._v("while")]),t._v(" 循环 "),s("code",[t._v("label")]),t._v(" 为 "),s("code",[t._v("outer")]),t._v("，结束条件为 "),s("code",[t._v("++index < length && result.length < maxLength")]),t._v(" "),s("ul",[s("li",[t._v("也就是 "),s("code",[t._v("index")]),t._v(" 小于数组集第一项的长度，并且 结果数组的长度 小于 最大长度")])])]),t._v(" "),s("li",[t._v("循环开始，拿到 "),s("code",[t._v("array")]),t._v(" (数组集第一项) 对应下标的值 "),s("code",[t._v("value")]),t._v("，并且定义 "),s("code",[t._v("computed")]),t._v(" 变量用作缓存 "),s("code",[t._v("value")]),t._v(" 值")]),t._v(" "),s("li",[t._v("如果 用户自定义了 "),s("code",[t._v("iteratee")]),t._v(" 函数，则使用 "),s("code",[t._v("iteratee")]),t._v(" 函数处理 "),s("code",[t._v("value")]),t._v(" 值，赋值给 "),s("code",[t._v("computed")]),t._v(" ，否则 "),s("code",[t._v("computed")]),t._v(" 就为 "),s("code",[t._v("value")])]),t._v(" "),s("li",[t._v("紧接着处理"),s("code",[t._v("value")]),t._v("值，会将 "),s("code",[t._v("+0")]),t._v(" 和 "),s("code",[t._v("-0")]),t._v(" 都会处理为 "),s("code",[t._v("0")])]),t._v(" "),s("li",[t._v("开始 "),s("code",[t._v("if")]),t._v(" 判断，判断条件为 "),s("code",[t._v("!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))")]),t._v(" "),s("ul",[s("li",[t._v("判断 "),s("code",[t._v("seen")]),t._v(" (caches第一项，和数组集第一项对应) 是否为 "),s("code",[t._v("undefined")])]),t._v(" "),s("li",[t._v("如果不是 "),s("code",[t._v("undefined")]),t._v(" ，则 "),s("code",[t._v("seen")]),t._v(" 为 "),s("code",[t._v("SetCache")]),t._v(" ，使用 "),s("code",[t._v("cacheHas")]),t._v(" 判断 "),s("code",[t._v("seen")]),t._v(" 中是否已经存在当前计算后("),s("code",[t._v("computed")]),t._v(")的值")]),t._v(" "),s("li",[t._v("如果是 "),s("code",[t._v("undefined")]),t._v("， 就使用 "),s("code",[t._v("includes")]),t._v(" 判断 结果数组中，是否已经存在当前计算后的值("),s("code",[t._v("computed")]),t._v(")")]),t._v(" "),s("li",[t._v("如果传入了 "),s("code",[t._v("comparator")]),t._v(" 这里判断方法调用的就是 "),s("code",[t._v("arrayIncludesWith")]),t._v("， 否则默认调用 "),s("code",[t._v("arrayIncludes")])]),t._v(" "),s("li",[t._v("根据 三目运算符 返回的结果，取非，"),s("strong",[t._v("也就是如果当前计算后的值，不存在于结果数组的情况下，才会进入 if 代码块")])])])]),t._v(" "),s("li",[t._v("进入 "),s("code",[t._v("if")]),t._v(" 代码块后，开始遍历整个数组集，内层 "),s("code",[t._v("while")]),t._v(" 循环")]),t._v(" "),s("li",[t._v("同样也是 缓存了 数组集的长度 "),s("code",[t._v("othLength")]),t._v(" 为 "),s("code",[t._v("othIndex")]),t._v("，做 "),s("code",[t._v("while")]),t._v(" 递减使用")]),t._v(" "),s("li",[s("code",[t._v("while")]),t._v(" 循环中 也是有一个 "),s("code",[t._v("if")]),t._v(" 判断，判断条件为 "),s("code",[t._v("!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))")]),t._v(" "),s("ul",[s("li",[t._v("从缓存中取当前遍历的数组缓存，判断是否为 "),s("code",[t._v("undefined")])]),t._v(" "),s("li",[t._v("如果不为 "),s("code",[t._v("undefined")]),t._v(" ，使用 "),s("code",[t._v("cacheHas")]),t._v(" 判断当前 "),s("code",[t._v("cache")]),t._v(" 中是否有 "),s("code",[t._v("computed")])]),t._v(" "),s("li",[t._v("如果为 "),s("code",[t._v("undefined")]),t._v("，则使用 "),s("code",[t._v("includes")]),t._v(" 进行判断")]),t._v(" "),s("li",[t._v("也就是，如果当前遍历的数组中，不存在 "),s("code",[t._v("computed")]),t._v(" 的值，才会进入代码块")])])]),t._v(" "),s("li",[t._v("进入代码块后，会 "),s("code",[t._v("continue")]),t._v(" 掉当前外层循环，"),s("strong",[t._v("也就是说，正在判断的 "),s("code",[t._v("array")]),t._v(" (数组集第一项) 中的值，在其他数组中必须存在，如有一个数组不存在当前进行判断的值，则就跳出这次循环，进而判断下一个值")])]),t._v(" "),s("li",[t._v("如果整个 内层 "),s("code",[t._v("while")]),t._v(" 循环完成后，都没有 "),s("code",[t._v("continue")]),t._v(" 掉，"),s("strong",[t._v("则证明这个 值，就是要的交集结果中的一个")])]),t._v(" "),s("li",[t._v("判断如果 "),s("code",[t._v("seen")]),t._v(" 为 "),s("code",[t._v("SetCache")]),t._v(" ，"),s("code",[t._v("seen.push(computed)")]),t._v("，用作下一次判断")]),t._v(" "),s("li",[t._v("结果数组 "),s("code",[t._v("result.push(value)")])])])]),t._v(" "),s("li",[s("p",[t._v("最后，整个循环遍历结束后，返回结果数组")])])]),t._v(" "),s("h2",{attrs:{id:"remark"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remark"}},[t._v("#")]),t._v(" Remark")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("数组取交集，lodash 的思路十分的简单，你有多个数组，我只取第一个，根据第一个的值来进行判断，如果第一个数组中的一些值，在其他数组中都存在，那这些值就是你要的交集。这个意思就相当于说，交集的值，在第一个数组中肯定存在，如果在第一个数组中不存在，那肯定不是交集，所以我们只需要循环第一个数组的值来进行判断即可达到我们取交集的目的。")]),t._v(" "),s("p",[t._v("同时的，结果数组的长度，肯定取整个数组集中长度最短的那个")])])]),t._v(" "),s("img",{attrs:{src:t.$withBase("/assets/baseIntersection.png")}}),t._v(" "),s("h2",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("baseIntersection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 4, 5 ]")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);